name: OpenAI Automation

on:
  schedule:
    - cron: "0 0 * * 0"  # Запуск каждое воскресенье в 00:00 UTC
  workflow_dispatch:  # Позволяет запустить вручную

permissions:
  contents: write

jobs:
  openai-task:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v3

      - name: 🔑 Check OpenAI API Key
        run: |
          if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
            echo "❌ ERROR: OpenAI API key is missing in GitHub Secrets!"
            exit 1
          fi
          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "❌ ERROR: GitHub Token is missing in GitHub Secrets!"
            exit 1
          fi
          echo "✅ API keys are set."

      - name: 📊 Fetch GitHub Contributions
        run: |
          echo "🚀 Fetching GitHub contributions..."
          GH_USERNAME="alinachrks"
          REPO_NAME="alinachrks"
          SINCE=$(date -d "7 days ago" --iso-8601=seconds)

          # Получаем последние коммиты
          COMMITS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GH_USERNAME/$REPO_NAME/commits?since=$SINCE" | jq -r '.[].commit.message')

          # Получаем последние PR
          PULL_REQUESTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/search/issues?q=author:$GH_USERNAME+type:pr+created:>$SINCE" | jq -r '.items[].title')

          echo "📌 Recent Commits:"
          echo "$COMMITS"
          echo "📌 Recent Pull Requests:"
          echo "$PULL_REQUESTS"

          # Формируем текст для OpenAI
          SUMMARY_TEXT="GitHub contributions summary for $GH_USERNAME in the last 7 days:\n\n"
          SUMMARY_TEXT+="Commits:\n$COMMITS\n\n"
          SUMMARY_TEXT+="Pull Requests:\n$PULL_REQUESTS"

          echo "$SUMMARY_TEXT" > contributions.txt

      - name: 🚀 Call OpenAI API
        run: |
          echo "🚀 Calling OpenAI API..."
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d @- <<EOF
          {
            "model": "gpt-4",
            "messages": [
              {"role": "system", "content": "Summarize the following GitHub contributions:"},
              {"role": "user", "content": "$(cat contributions.txt)"}
            ],
            "temperature": 0.7,
            "max_tokens": 150
          }
          EOF
          )

          echo "📝 API Raw Response: $RESPONSE"

          ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.error.message // empty')
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "❌ OpenAI API request failed: $ERROR_MESSAGE"
            exit 1
          fi

          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')

          if [[ -z "$SUMMARY" || "$SUMMARY" == "null" ]]; then
            echo "⚠️ OpenAI API returned an empty response. Skipping update."
            exit 0
          fi

          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S UTC")
          echo -e "### 🧠 AI Weekly Summary (Updated: $TIMESTAMP)\n\n$SUMMARY" > ai_summary.md
          echo "✅ AI Summary successfully updated!"

      - name: ✍️ Update README with AI Summary
        run: |
          echo "📌 Updating README.md..."
          awk '
            /<!-- START_AI_SUMMARY -->/ {print; while (getline < "ai_summary.md") print; found=1; next}
            /<!-- END_AI_SUMMARY -->/ {found=0}
            !found
          ' README.md > temp.md && mv temp.md README.md

      - name: 🔄 Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add ai_summary.md README.md
          if git diff --cached --quiet; then
            echo "⚡ No changes to commit"
            exit 0
          fi

          git commit -m "📝 Auto-update AI Weekly Summary"
          
          # Предотвращение конфликтов при push
          git pull --rebase
          git push

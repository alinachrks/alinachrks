name: OpenAI GitHub Summary

on:
  schedule:
    - cron: "0 0 * * 0"  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 00:00 UTC
  workflow_dispatch:  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é

permissions:
  contents: write

jobs:
  openai-task:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: üîë Check OpenAI API Key
        run: |
          if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
            echo "‚ùå ERROR: OpenAI API key is missing in GitHub Secrets!"
            exit 1
          else
            echo "‚úÖ OpenAI API key is set."
          fi

      - name: üîç Fetch GitHub Contributions
        run: |
          echo "üöÄ Fetching GitHub contributions for the past 7 days..."

          GH_USERNAME="alinachrks"
          REPO_NAME="alinachrks"
          SINCE=$(date -d "7 days ago" --iso-8601=seconds)

          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          COMMITS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$GH_USERNAME/$REPO_NAME/commits?since=$SINCE" \
            | jq '[.[] | {date: .commit.author.date, message: .commit.message}]')

          # –ü–æ–ª—É—á–∞–µ–º PR –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          PULL_REQUESTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/search/issues?q=author:$GH_USERNAME+type:pr+created:>$SINCE" \
            | jq '[.items[] | {title: .title, state: .state}]')

          # –ï—Å–ª–∏ –∫–æ–º–º–∏—Ç–æ–≤ –Ω–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "No commits"
          if [[ -z "$COMMITS" || "$COMMITS" == "[]" ]]; then
            COMMITS='[{"date": "N/A", "message": "No commits this week."}]'
          fi

          # –ï—Å–ª–∏ PR –Ω–µ—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "No PRs"
          if [[ -z "$PULL_REQUESTS" || "$PULL_REQUESTS" == "[]" ]]; then
            PULL_REQUESTS='[{"title": "No PRs this week", "state": "N/A"}]'
          fi

          echo "üìù Commits JSON: $COMMITS"
          echo "üìù Pull Requests JSON: $PULL_REQUESTS"

          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –¥–ª—è OpenAI
          cat <<EOF > github_summary.json
          {
            "model": "gpt-4",
            "messages": [
              {"role": "system", "content": "Summarize the GitHub contributions for this week in a professional style."},
              {"role": "user", "content": "Commits: $COMMITS\n\nPull Requests: $PULL_REQUESTS"}
            ],
            "temperature": 0.7,
            "max_tokens": 150
          }
EOF

          cat github_summary.json

      - name: ü§ñ Call OpenAI API
        run: |
          echo "üöÄ Calling OpenAI API..."
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            --data-binary @github_summary.json)

          echo "üìù API Raw Response: $RESPONSE"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—à–∏–±–∫–∞
          ERROR_MESSAGE=$(echo "$RESPONSE" | jq -r '.error.message // empty')
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "‚ùå OpenAI API request failed: $ERROR_MESSAGE"
            exit 1
          fi

          # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
          SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
          if [[ -z "$SUMMARY" || "$SUMMARY" == "null" ]]; then
            echo "‚ö†Ô∏è OpenAI API returned an empty response. Skipping update."
            exit 0
          fi

          # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S UTC")
          echo -e "### üß† AI Weekly Summary (Updated: $TIMESTAMP)\n\n$SUMMARY" > ai_summary.md
          echo "‚úÖ AI Summary successfully updated!"

      - name: ‚úçÔ∏è Update README with AI Summary
        run: |
          echo "üìå Updating README.md..."
          awk '
            /<!-- START_AI_SUMMARY -->/ {print; while (getline < "ai_summary.md") print; found=1; next}
            /<!-- END_AI_SUMMARY -->/ {found=0}
            !found
          ' README.md > temp.md && mv temp.md README.md

      - name: üîÑ Commit and Push Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git add ai_summary.md README.md
          if git diff --cached --quiet; then
            echo "‚ö° No changes to commit"
            exit 0
          fi

          git commit -m "üìù Auto-update AI Weekly Summary"
          
          # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø—Ä–∏ push
          git pull --rebase
          git push


